/*Короткий опис кожного методу, його плюси та мінуси
CTE: Зручний для одноразових запитів, оскільки не зберігається в базі даних. Легко читати та використовувати, але його можна використовувати лише в межах одного запиту.
Переваги: Легкість у використанні та читабельність.
Недоліки: Відсутність збереження результату між запитами.
View: Підходить для повторного використання результатів, зберігаючи їх в базі даних. Ідеально для часто використовуваних обчислень.
Переваги: Можна використовувати в інших запитах.
Недоліки: Не підтримує параметри та може бути повільнішим для великих таблиць через збереження в базі.
Тимчасова таблиця: Ідеально підходить для запитів, де потрібно виконати кілька кроків і зберігати результати лише в межах сеансу.
Переваги: Підходить для складних запитів.
Недоліки: Не зберігається після завершення сесії.*/

/*Завдання 1: Знайти клієнтів, які зробили більше ніж 3 замовлення.
customers: customer_id, first_name, last_name, email, phone, address, city, state, zip_code
orders: order_id, customer_id, order_date, shipping_date, status
Підзадачі:
1. Порахувати кількість замовлень по кожному Клієнту 
2. Співставити Клієнтів та кількість їх замовлень
3. Вивести результат */

SELECT * FROM customers;
SELECT * FROM orders;

-- 1.1. CTE:
WITH OrderCount AS (
    SELECT 
		customer_id
        , COUNT(*) AS order_count
    FROM orders
    GROUP BY customer_id
)
SELECT 
	c.customer_id
    , c.first_name
    , c.last_name
    , oc.order_count
FROM customers c
JOIN OrderCount oc ON c.customer_id = oc.customer_id
WHERE oc.order_count > 3
ORDER BY 4 ASC;

-- 1.2. View:
CREATE OR REPLACE VIEW CustomerOrderCount AS
SELECT customer_id, COUNT(*) AS order_count
FROM orders
GROUP BY customer_id;

SELECT c.customer_id, c.first_name, c.last_name, coc.order_count
FROM customers c
JOIN CustomerOrderCount coc ON c.customer_id = coc.customer_id
WHERE coc.order_count > 3
ORDER BY 4 ASC;

-- 1.3. Тимчасова таблиця:
CREATE TEMPORARY TABLE OrderCount AS
SELECT customer_id, COUNT(*) AS order_count
FROM orders
GROUP BY customer_id;

SELECT c.customer_id, c.first_name, c.last_name, oc.order_count
FROM customers c
JOIN OrderCount oc ON c.customer_id = oc.customer_id
WHERE oc.order_count > 3
ORDER BY 4 ASC;

DROP TEMPORARY TABLE OrderCount;

/*Можна припустити, що інформація по Клієнтах, що зробили більше ніж 3 замовлення за певний проміжок часу потрібна для бізнесу постійно (як кількість активних/постійних клієнтів- то краще створити VIEW, щоб не виконувати зайві розрахунки при кожному запиті.
View  містить актуальні дані й може бути використаний у звітах та інших запитах без повторного обчислення. (ми використовували подібний розрахунок для поповнення складів - коли розглядалась аналітика продажів в шт по клієнтах, що зробили 3 і більше замовлення за період - і залежно від кількості замовлень їх присвоювався перний рейтинг :)
CTE підходить, якщо запит робиться одноразово, наприклад, для аналітичного звіту.
Temp Table можна використовувати, якщо ми робимо багато проміжних розрахунків у межах складного аналітичного запиту - готуємо звітність за попередній рік і ці клієнти увійдуть в список активних, а даних багато і основну таблицю краще не чіпати.*/

/*Завдання 2: Знайти 10 товарів з найбільшою кількістю проданих одиниць.
products: product_id, product_name, total_sales
sales: sale_id, order_id, product_id, quantity, sale_price, employee_id
Підзадачі:
1. Обчислити кількість проданих одиниць по кожному товару(JOIN)
2. Вивести результати */
SELECT * FROM sales;
SELECT * FROM products;

-- 2.1. CTE:
WITH ProductSales AS (
    SELECT p.product_id, p.product_name, SUM(s.quantity) AS total_sales
    FROM sales s
    JOIN products p ON s.product_id = p.product_id
    GROUP BY p.product_id
)
SELECT product_id, product_name, total_sales
FROM ProductSales
ORDER BY total_sales DESC
LIMIT 10;

-- 2.2. View:
CREATE OR REPLACE VIEW ProductSales AS
SELECT p.product_id, p.product_name, SUM(s.quantity) AS total_sales
FROM sales s
JOIN products p ON s.product_id = p.product_id
GROUP BY p.product_id;

SELECT product_id, product_name, total_sales
FROM ProductSales
ORDER BY total_sales DESC
LIMIT 10;

-- 2.3. Тимчасова таблиця:
CREATE TEMPORARY TABLE ProductSales AS
SELECT p.product_id, p.product_name, SUM(s.quantity) AS total_sales
FROM sales s
JOIN products p ON s.product_id = p.product_id
GROUP BY p.product_id;

SELECT product_id, product_name, total_sales
FROM ProductSales
ORDER BY total_sales DESC
LIMIT 10;

DROP TEMPORARY TABLE ProductSales;

-- 2.0 Найпростша альтернатива
SELECT 
    p.product_id,
    SUM(s.quantity),
    p.product_name
FROM sales s
JOIN products p ON s.product_id = p.product_id 
GROUP BY 1
ORDER BY 2 DESC
LIMIT 10;

/*Оптимальний метод: View - бізнесу часто потрібен цей рейтинг для дашбордів та аналітики продажів, бо дуже часто є аналітика на Розетці або АЛЛО та інших сайтах про ТОП продуктів, які вибирають Клієнти
View дозволяє використовувати ці дані без повторного підрахунку при кожному запиті.
CTE зручно використовувати для разового аналізу або побудови складного звіту.
Temp Table корисна, якщо ми далі хочемо працювати з цими 10 продуктами, наприклад, аналізувати їх у розрізі клієнтів.*/

/*Завдання 3: Знайти замовлення з найбільшими платежами та їхні суми
orders:order_id, customer_id, order_date, shipping_date, status
payments:payment_id, order_id, payment_date, amount, payment_method
Підзадачі:
1. Вивести список найбільших платежів 
2. З'єднати найбільші платежі з номерами відповідних замовлень
3. Вивести результати 
*/
SELECT * FROM orders;
SELECT * FROM payments;

-- 3.1. CTE: 
WIHT PaymentAmounts AS(
	SELECT 
		o.order_id
        ,o.customer_id
        , SUM(p.amount) AS total_payment
	FROM orders o
    JOIN payments p ON o.order_id = p.order_id
    GROUP BY 1,2
    ORDER BY 3 DESC
    )
SELECT
	order_id
    ,total_payment
FROM PaymentAmounts
ORDER BY total_payment DESC
LIMIT 1
;

-- 3.2. View:
CREATE OR REPLACE VIEW PaymentAmounts AS
SELECT o.order_id, SUM(p.amount) AS total_payment
FROM payments p
JOIN orders o ON p.order_id = o.order_id
GROUP BY o.order_id;

SELECT order_id, total_payment
FROM PaymentAmounts
ORDER BY total_payment DESC
LIMIT 1;

-- 3.3. Тимчасова таблиця:
CREATE TEMPORARY TABLE PaymentAmounts AS
SELECT o.order_id, SUM(p.amount) AS total_payment
FROM payments p
JOIN orders o ON p.order_id = o.order_id
GROUP BY o.order_id;

SELECT order_id, total_payment
FROM PaymentAmounts
ORDER BY total_payment DESC
LIMIT 1;

DROP TEMPORARY TABLE PaymentAmounts;

/*Оптимальний метод: CTE - тому що це, ймовірно, запит, який рідко виконується постійно, а використовується разово для аналітики або звітності.
CTE ефективний для одноразового підрахунку найбільших платежів, не створюючи зайвих об'єктів у базі.
Але якщо бізнесові потрібно відстежувати найбільші платежі на регулярній основі, тоді кращим варіантом буде View.
Якщо ми хочемо робити подальші розрахунки або фільтрацію на основі цих даних(тобто це проміжна частина великої звітності) - Temp Table.*/

/*Завдання 4:Знайти найдорожчі товари в кожній категорії.
Підзадачі:
products: product_id, product_name, category, price, stock_quantity, supplier_id
1.Вивести максимальні ціни по кожній категорії (в СТЕ)
2.В основному запиті вивести p.product_id, p.product_name, p.category, p.price, зв'язавши таблиці products та СТЕ, де p.price = mpc.max_price  */
SELECT * FROM products;

-- 4.1. CTE:
WITH MaxPricePerCategory AS(
	SELECT 
		category
        , MAX(price) AS max_price
	FROM products
    GROUP BY 1
    )
SELECT p.product_id, p.product_name, p.category, p.price
FROM products p
JOIN MaxPricePerCategory mpc ON p.category = mpc.category
WHERE p.price = mpc.max_price;

-- 4.2. View:
CREATE OR REPLACE VIEW MaxPricePerCategory AS
SELECT category, MAX(price) AS max_price
FROM products
GROUP BY 1;

SELECT p.product_id, p.product_name, p.category, p.price
FROM products p
JOIN MaxPricePerCategory mpc ON p.category = mpc.category
WHERE p.price = mpc.max_price;

-- 4.3. Тимчасова таблиця:
CREATE TEMPORARY TABLE MaxPricePerCategory AS
SELECT category, MAX(price) AS max_price
FROM products
GROUP BY 1;

SELECT p.product_id, p.product_name, p.category, p.price
FROM products p
JOIN MaxPricePerCategory mpc ON p.category = mpc.category
WHERE p.price = mpc.max_price;

DROP TEMPORARY TABLE MaxPricePerCategory;

/*Оптимальний метод: View - бізнесу може часто знадобитися така інформація для звітів або аналізу асортименту( а так можна отримати найдорожчі товари без необхідності повторного підрахунку)
CTE хороший для разового аналізу, наприклад, якщо ми хочемо порівняти ціни за певний період.
Temp Table може бути корисною, якщо ми робимо проміжні обчислення перед створенням остаточного звіту.*/

/*Завдання 5: Знайти клієнтів, які зробили замовлення за останній місяць.
customers:customer_id, first_name, last_name, email, phone, address, city, state, zip_code
orders:order_id, customer_id, order_date, shipping_date, status
Підзадачі:
 1. Визначити список замовлень за останній місяць (або інший відрізок часу, залежно від даних в таблицях)
 2. Вивести також кількість ордерів по кожному клієнту
 3. Вивести результати 
1. */
-- 5.1. CTE:
WITH RecentOrders AS (
    SELECT customer_id, COUNT(*) AS order_count  -- додамо кількість ордерів по кожному Клієнту, для візуалізації
    FROM orders
    -- WHERE order_date >= CURDATE() - INTERVAL 1 MONTH -- за минулий місяць в наших таблицях немає інформації. Отже, щоб перевірити чи робочий запит розширимо період до 1 року
    WHERE order_date >= CURDATE() - INTERVAL 1 YEAR
    GROUP BY customer_id
)
SELECT  c.customer_id, c.first_name, c.last_name, ro.order_count
FROM customers c 
JOIN RecentOrders ro ON c.customer_id = ro.customer_id;

-- 5.2. VIEW
CREATE OR REPLACE VIEW RecentOrders AS
SELECT customer_id, COUNT(*) AS order_count -- додамо кількість ордерів по кожному Клієнту, для візуалізації
FROM orders
-- WHERE order_date >= CURDATE() - INTERVAL 1 MONTH -- за минулий місяць в наших таблицях немає інформації. Отже, щоб перевірити чи робочий запит розширимо період до 1 року
WHERE order_date >= CURDATE() - INTERVAL 1 YEAR
GROUP BY customer_id;

-- Запит для отримання даних з VIEW
SELECT c.customer_id, c.first_name, c.last_name, ro.order_count
FROM customers c
JOIN RecentOrders ro ON c.customer_id = ro.customer_id;

-- 5.3. Тимчасова таблиця:
-- Створення TEMPORARY TABLE
CREATE TEMPORARY TABLE RecentOrders AS -- додамо кількість ордерів по кожному Клієнту, для візуалізації
SELECT customer_id, COUNT(*) AS order_count
FROM orders
-- WHERE order_date >= CURDATE() - INTERVAL 1 MONTH  за минулий місяць в наших таблицях немає інформації. Отже, щоб перевірити чи робочий запит розширимо період до 1 року
WHERE order_date >= CURDATE() - INTERVAL 1 YEAR
GROUP BY customer_id;

-- Запит для отримання даних з TEMPORARY TABLE
SELECT c.customer_id, c.first_name, c.last_name, ro.order_count
FROM customers c
JOIN RecentOrders ro ON c.customer_id = ro.customer_id;

-- Видалити TEMPORARY TABLE (необов'язково, бо він буде видалений автоматично після завершення сеансу)
DROP TEMPORARY TABLE RecentOrders;
/* Оптимальний метод: View або CTE (залежить від потреб бізнесу)
View - якщо це запит, який часто використовується в аналітичних дашбордах або маркетингових кампаніях.
CTE - якщо потрібен одноразовий звіт або аналітичний запит, наприклад, для перевірки активності клієнтів.
Temp Table - якщо потрібно тимчасово зберігати дані, наприклад, для подальшої глибшої аналітики або сегментації клієнтів.*/

